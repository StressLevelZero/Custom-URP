// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CalculateMip

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
uint4 _OutputDim;
Texture3D<float4> _Input;
RWTexture3D<float4> _Output;
SamplerState sampler_LinearClamp;

[numthreads(4,4,4)]
void CalculateMip(uint3 id : SV_DispatchThreadID)
{
		//id.xyz = min(id.xyz, _OutputDim.xyz - (1).xxx);
		const float3 samplePoints[8] = {
			float3(0.25, 0.25, 0.25),
			float3(0.75, 0.25, 0.25),
			float3(0.25, 0.75, 0.25),
			float3(0.75, 0.75, 0.25),
			float3(0.25, 0.25, 0.75),
			float3(0.75, 0.25, 0.75),
			float3(0.25, 0.75, 0.75),
			float3(0.75, 0.75, 0.75),
		};
		float4 output = float4(0,0,0,0);
		float3 coordsFloat = (float3)min(id.xyz, _OutputDim.xyz - (1).xxx);
		float3 dimFloat = (float3)_OutputDim.xyz;
		[unroll] for (int i = 0; i < 8; i++)
		{
			float3 voxelCenter = (coordsFloat + samplePoints[i]) / dimFloat;
			output += 0.125 * _Input.SampleLevel(sampler_LinearClamp, voxelCenter, 0);
		}

		_Output[id.xyz] = output;
}
